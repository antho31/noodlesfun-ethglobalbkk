{
  "address": "0xF39Cc5a1f1adA029de8C7F18D4687B438dEa45a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creatorLinker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "name": "AccessControlEnforcedDefaultAdminDelay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessControlEnforcedDefaultAdminRules",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        }
      ],
      "name": "AccessControlInvalidDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCreator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFeeParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCreditsOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughEthSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreatorFeeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreatorVisibilitySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "visibilityId",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "tradeCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referrerFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newTotalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newCurrentPrice",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IVisibilityCredits.CreditsTradeEvent",
          "name": "tradeEvent",
          "type": "tuple"
        }
      ],
      "name": "CreditsTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreditsTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultAdminDelayChangeCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "effectSchedule",
          "type": "uint48"
        }
      ],
      "name": "DefaultAdminDelayChangeScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultAdminTransferCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "acceptSchedule",
          "type": "uint48"
        }
      ],
      "name": "DefaultAdminTransferScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "B",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CREATORS_CHECKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CREATOR_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CREDITS_TRANSFER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRER_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "beginDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "buyCostWithFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "buyCredits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        }
      ],
      "name": "changeDefaultAdminDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        }
      ],
      "name": "claimCreatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdminDelay",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdminDelayIncreaseWait",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        }
      ],
      "name": "getVisibility",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableFeeBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVisibilityCreditBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        }
      ],
      "name": "getVisibilityCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        }
      ],
      "name": "getVisibilityKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "grantee",
          "type": "address"
        }
      ],
      "name": "grantCreatorTransferRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingDefaultAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingDefaultAdminDelay",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolTreasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollbackDefaultAdminDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "sellCostWithFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reimbursement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referrerFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "sellCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "setCreatorVisibility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "visibilityId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "visibilityCredits",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableFeeBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x737c0ff82a9a56a012f00d5d7f1b852fdba3b6293b2ee679edcde6b2cba5646a",
  "receipt": {
    "to": null,
    "from": "0x8811c5f40F1bF008c91e084BF4159b8cDEd2898B",
    "contractAddress": "0xF39Cc5a1f1adA029de8C7F18D4687B438dEa45a2",
    "transactionIndex": 0,
    "gasUsed": "91135720",
    "logsBloom": "0x
    "blockHash": "0xe8bb6c54dc6840fb063e2f0f37c8378a2069f09e9b7b70847e663043bca1dccb",
    "transactionHash": "0x737c0ff82a9a56a012f00d5d7f1b852fdba3b6293b2ee679edcde6b2cba5646a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 340306851,
        "transactionHash": "0x737c0ff82a9a56a012f00d5d7f1b852fdba3b6293b2ee679edcde6b2cba5646a",
        "address": "0xF39Cc5a1f1adA029de8C7F18D4687B438dEa45a2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008811c5f40f1bf008c91e084bf4159b8cded2898b",
          "0x0000000000000000000000008811c5f40f1bf008c91e084bf4159b8cded2898b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe8bb6c54dc6840fb063e2f0f37c8378a2069f09e9b7b70847e663043bca1dccb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 340306851,
        "transactionHash": "0x737c0ff82a9a56a012f00d5d7f1b852fdba3b6293b2ee679edcde6b2cba5646a",
        "address": "0xF39Cc5a1f1adA029de8C7F18D4687B438dEa45a2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d1349",
          "0x0000000000000000000000008811c5f40f1bf008c91e084bf4159b8cded2898b",
          "0x0000000000000000000000008811c5f40f1bf008c91e084bf4159b8cded2898b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe8bb6c54dc6840fb063e2f0f37c8378a2069f09e9b7b70847e663043bca1dccb"
      }
    ],
    "blockNumber": 340306851,
    "cumulativeGasUsed": "91135720",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8811c5f40F1bF008c91e084BF4159b8cDEd2898B",
    "0x8811c5f40F1bF008c91e084BF4159b8cDEd2898B"
  ],
  "numDeployments": 1,
  "solcInputHash": "5169b1e0d787744ac0ab34f21d62e69a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorLinker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"name\":\"AccessControlEnforcedDefaultAdminDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlEnforcedDefaultAdminRules\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"AccessControlInvalidDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCreator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCreditsOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEthSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreatorFeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorVisibilitySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tradeCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCurrentPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVisibilityCredits.CreditsTradeEvent\",\"name\":\"tradeEvent\",\"type\":\"tuple\"}],\"name\":\"CreditsTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditsTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminDelayChangeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"effectSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminDelayChangeScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"acceptSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminTransferScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"B\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATORS_CHECKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATOR_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREDITS_TRANSFER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"beginDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyCostWithFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyCredits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"}],\"name\":\"changeDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"}],\"name\":\"claimCreatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelayIncreaseWait\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"}],\"name\":\"getVisibility\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableFeeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVisibilityCreditBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"}],\"name\":\"getVisibilityCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"}],\"name\":\"getVisibilityKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"grantCreatorTransferRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollbackDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"sellCostWithFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reimbursement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"sellCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"setCreatorVisibility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"visibilityId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"visibilityCredits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableFeeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Users can spend these credits for ad purposes.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlEnforcedDefaultAdminDelay(uint48)\":[{\"details\":\"The delay for transferring the default admin delay is enforced and the operation must wait until `schedule`. NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\"}],\"AccessControlEnforcedDefaultAdminRules()\":[{\"details\":\"At least one of the following rules was violated: - The `DEFAULT_ADMIN_ROLE` must only be managed by itself. - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time. - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\"}],\"AccessControlInvalidDefaultAdmin(address)\":[{\"details\":\"The new default admin is not a valid default admin.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"DefaultAdminDelayChangeCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\"},\"DefaultAdminDelayChangeScheduled(uint48,uint48)\":{\"details\":\"Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next delay to be applied between default admin transfer after `effectSchedule` has passed.\"},\"DefaultAdminTransferCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\"},\"DefaultAdminTransferScheduled(address,uint48)\":{\"details\":\"Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule` passes.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptDefaultAdminTransfer()\":{\"details\":\"Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\"},\"beginDefaultAdminTransfer(address)\":{\"details\":\"Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event.\"},\"buyCredits(string,uint256,address)\":{\"details\":\"Users must send sufficient Ether to cover the cost and fees.\",\"params\":{\"amount\":\"The amount of credits to buy.\",\"referrer\":\"The address of the referrer (optional).\",\"visibilityId\":\"The ID representing the visibility credits.\"}},\"cancelDefaultAdminTransfer()\":{\"details\":\"Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event.\"},\"changeDefaultAdminDelay(uint48)\":{\"details\":\"Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\"},\"claimCreatorFee(string)\":{\"params\":{\"visibilityId\":\"The ID representing the visibility credits.\"}},\"defaultAdmin()\":{\"details\":\"Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\"},\"defaultAdminDelay()\":{\"details\":\"Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}.\"},\"defaultAdminDelayIncreaseWait()\":{\"details\":\"Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"See {IERC5313-owner}.\"},\"pendingDefaultAdmin()\":{\"details\":\"Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\"},\"pendingDefaultAdminDelay()\":{\"details\":\"Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule.\"},\"renounceRole(bytes32,address)\":{\"details\":\"See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role.\"},\"revokeRole(bytes32,address)\":{\"details\":\"See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"rollbackDefaultAdminDelay()\":{\"details\":\"Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event.\"},\"sellCredits(string,uint256,address)\":{\"details\":\"Users receive Ether minus applicable fees.\",\"params\":{\"amount\":\"The amount of credits to sell.\",\"referrer\":\"The address of the referrer (optional).\",\"visibilityId\":\"The ID representing the visibility credits.\"}},\"setCreatorVisibility(string,address)\":{\"details\":\"Only callable by an account with the `CREATORS_CHECKER_ROLE`.\",\"params\":{\"creator\":\"The address of the creator, can be address(0).\",\"visibilityId\":\"The ID representing the visibility credits.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferCredits(string,address,address,uint256)\":{\"details\":\"Only callable by an account with the `CREDITS_TRANSFER_ROLE`.\",\"params\":{\"amount\":\"The amount of credits to transfer.\",\"from\":\"The address to transfer credits from.\",\"to\":\"The address to transfer credits to.\",\"visibilityId\":\"The ID representing the visibility credits.\"}},\"updateTreasury(address)\":{\"details\":\"Only callable by an account with the `DEFAULT_ADMIN_ROLE`.\",\"params\":{\"treasury\":\"The address of the new protocol treasury (cannot be address(0)).\"}}},\"stateVariables\":{\"A\":{\"details\":\"The bonding curve is defined by the formula:        PRICE = BASE_PRICE + A * totalSupply^2 + B * totalSupply      - BASE_PRICE: The initial price when totalSupply is zero.      - A, B: Constants that determine the curvature of the price function.\"}},\"title\":\"VisibilityCredits\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"A()\":{\"notice\":\"Users can purchase and sell visibility credits according to a bonding curve.\"},\"FEE_DENOMINATOR()\":{\"notice\":\"Fee percentages in ppm (parts per million).\"},\"buyCredits(string,uint256,address)\":{\"notice\":\"Buys a specified amount of visibility credits.\"},\"claimCreatorFee(string)\":{\"notice\":\"Allows creators to claim their accumulated fees.\"},\"sellCredits(string,uint256,address)\":{\"notice\":\"Sells a specified amount of visibility credits.\"},\"setCreatorVisibility(string,address)\":{\"notice\":\"Sets the creator for a specific visibility ID.\"},\"transferCredits(string,address,address,uint256)\":{\"notice\":\"Transfers visibility credits between users.\"},\"updateTreasury(address)\":{\"notice\":\"Updates the protocol treasury address.\"}},\"notice\":\"Allows users to buy and sell visibility credits along a bonding curve.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VisibilityCredits.sol\":\"VisibilityCredits\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlDefaultAdminRules} from \\\"./IAccessControlDefaultAdminRules.sol\\\";\\nimport {AccessControl, IAccessControl} from \\\"../AccessControl.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {IERC5313} from \\\"../../interfaces/IERC5313.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\\n * over other roles that may potentially have privileged rights in the system.\\n *\\n * If a specific role doesn't have an admin role assigned, the holder of the\\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\\n *\\n * This contract implements the following risk mitigations on top of {AccessControl}:\\n *\\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\\n *\\n * Example usage:\\n *\\n * ```solidity\\n * contract MyToken is AccessControlDefaultAdminRules {\\n *   constructor() AccessControlDefaultAdminRules(\\n *     3 days,\\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\\n *    ) {}\\n * }\\n * ```\\n */\\nabstract contract AccessControlDefaultAdminRules is IAccessControlDefaultAdminRules, IERC5313, AccessControl {\\n    // pending admin pair read/written together frequently\\n    address private _pendingDefaultAdmin;\\n    uint48 private _pendingDefaultAdminSchedule; // 0 == unset\\n\\n    uint48 private _currentDelay;\\n    address private _currentDefaultAdmin;\\n\\n    // pending delay pair read/written together frequently\\n    uint48 private _pendingDelay;\\n    uint48 private _pendingDelaySchedule; // 0 == unset\\n\\n    /**\\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\\n     */\\n    constructor(uint48 initialDelay, address initialDefaultAdmin) {\\n        if (initialDefaultAdmin == address(0)) {\\n            revert AccessControlInvalidDefaultAdmin(address(0));\\n        }\\n        _currentDelay = initialDelay;\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC5313-owner}.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return defaultAdmin();\\n    }\\n\\n    ///\\n    /// Override AccessControl role management\\n    ///\\n\\n    /**\\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-renounceRole}.\\n     *\\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\\n     * has also passed when calling this function.\\n     *\\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\\n     *\\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\\n     * non-administrated role.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n            }\\n            delete _pendingDefaultAdminSchedule;\\n        }\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_grantRole}.\\n     *\\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\\n     * role has been previously renounced.\\n     *\\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            if (defaultAdmin() != address(0)) {\\n                revert AccessControlEnforcedDefaultAdminRules();\\n            }\\n            _currentDefaultAdmin = account;\\n        }\\n        return super._grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_revokeRole}.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            delete _currentDefaultAdmin;\\n        }\\n        return super._revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super._setRoleAdmin(role, adminRole);\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules accessors\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdmin() public view virtual returns (address) {\\n        return _currentDefaultAdmin;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelay() public view virtual returns (uint48) {\\n        uint48 schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\\n        schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\\n        return 5 days;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _beginDefaultAdminTransfer(newAdmin);\\n    }\\n\\n    /**\\n     * @dev See {beginDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _cancelDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {cancelDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _cancelDefaultAdminTransfer() internal virtual {\\n        _setPendingDefaultAdmin(address(0), 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function acceptDefaultAdminTransfer() public virtual {\\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\\n        if (_msgSender() != newDefaultAdmin) {\\n            // Enforce newDefaultAdmin explicit acceptance.\\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\\n        }\\n        _acceptDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {acceptDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _acceptDefaultAdminTransfer() internal virtual {\\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n        }\\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        delete _pendingDefaultAdmin;\\n        delete _pendingDefaultAdminSchedule;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _changeDefaultAdminDelay(newDelay);\\n    }\\n\\n    /**\\n     * @dev See {changeDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\\n        _setPendingDelay(newDelay, newSchedule);\\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _rollbackDefaultAdminDelay();\\n    }\\n\\n    /**\\n     * @dev See {rollbackDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _rollbackDefaultAdminDelay() internal virtual {\\n        _setPendingDelay(0, 0);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\\n     * become the new {defaultAdminDelay}.\\n     *\\n     * The value returned guarantees that if the delay is reduced, it will go into effect\\n     * after a wait that honors the previously set delay.\\n     *\\n     * See {defaultAdminDelayIncreaseWait}.\\n     */\\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\\n        uint48 currentDelay = defaultAdminDelay();\\n\\n        // When increasing the delay, we schedule the delay change to occur after a period of \\\"new delay\\\" has passed, up\\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\\n        // using milliseconds instead of seconds.\\n        //\\n        // When decreasing the delay, we wait the difference between \\\"current delay\\\" and \\\"new delay\\\". This guarantees\\n        // that an admin transfer cannot be made faster than \\\"current delay\\\" at the time the delay change is scheduled.\\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\\n        return\\n            newDelay > currentDelay\\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\\n                : currentDelay - newDelay;\\n    }\\n\\n    ///\\n    /// Private setters\\n    ///\\n\\n    /**\\n     * @dev Setter of the tuple for pending admin and its schedule.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\\n\\n        _pendingDefaultAdmin = newAdmin;\\n        _pendingDefaultAdminSchedule = newSchedule;\\n\\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\\n        if (_isScheduleSet(oldSchedule)) {\\n            // Emit for implicit cancellations when another default admin was scheduled.\\n            emit DefaultAdminTransferCanceled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Setter of the tuple for pending delay and its schedule.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\\n        uint48 oldSchedule = _pendingDelaySchedule;\\n\\n        if (_isScheduleSet(oldSchedule)) {\\n            if (_hasSchedulePassed(oldSchedule)) {\\n                // Materialize a virtual delay\\n                _currentDelay = _pendingDelay;\\n            } else {\\n                // Emit for implicit cancellations when another delay was scheduled.\\n                emit DefaultAdminDelayChangeCanceled();\\n            }\\n        }\\n\\n        _pendingDelay = newDelay;\\n        _pendingDelaySchedule = newSchedule;\\n    }\\n\\n    ///\\n    /// Private helpers\\n    ///\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\\n     */\\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\\n        return schedule != 0;\\n    }\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\\n     */\\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\\n        return schedule < block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev The new default admin is not a valid default admin.\\n     */\\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\\n\\n    /**\\n     * @dev At least one of the following rules was violated:\\n     *\\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\\n     */\\n    error AccessControlEnforcedDefaultAdminRules();\\n\\n    /**\\n     * @dev The delay for transferring the default admin delay is enforced and\\n     * the operation must wait until `schedule`.\\n     *\\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\\n     */\\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\\n\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x969a4661694319a003d037ccbf7c8310f8994d746b763c933d3f76d906e67203\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5313.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5313.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for the Light Contract Ownership Standard.\\n *\\n * A standardized minimal interface required to identify an account that controls a contract\\n */\\ninterface IERC5313 {\\n    /**\\n     * @dev Gets the address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"contracts/VisibilityCredits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVisibilityCredits.sol\\\";\\n\\n/**\\n * @title VisibilityCredits\\n * @notice Allows users to buy and sell visibility credits along a bonding curve.\\n * @dev Users can spend these credits for ad purposes.\\n */\\ncontract VisibilityCredits is\\n\\tIVisibilityCredits,\\n\\tAccessControlDefaultAdminRules,\\n\\tReentrancyGuard\\n{\\n\\tstruct Visibility {\\n\\t\\taddress creator; // The address receiving creator fees.\\n\\t\\tuint256 totalSupply; // Total visibility credits in circulation.\\n\\t\\tuint256 claimableFeeBalance; // Accumulated creator fees awaiting withdrawal.\\n\\t\\tmapping(address => uint256) creditBalances; // User credit balances.\\n\\t}\\n\\n\\t/**\\n\\t * @notice Users can purchase and sell visibility credits according to a bonding curve.\\n\\t *\\n\\t * @dev The bonding curve is defined by the formula:\\n\\t *        PRICE = BASE_PRICE + A * totalSupply^2 + B * totalSupply\\n\\t *      - BASE_PRICE: The initial price when totalSupply is zero.\\n\\t *      - A, B: Constants that determine the curvature of the price function.\\n\\t */\\n\\tuint256 public constant A = 0.000000015 ether;\\n\\tuint256 public constant B = 0.000025 ether;\\n\\tuint256 public constant BASE_PRICE = 0.0001 ether;\\n\\n\\tuint256 public constant MAX_TOTAL_SUPPLY = type(uint64).max;\\n\\n\\tbytes32 public constant CREDITS_TRANSFER_ROLE =\\n\\t\\tkeccak256(\\\"CREDITS_TRANSFER_ROLE\\\");\\n\\tbytes32 public constant CREATORS_CHECKER_ROLE =\\n\\t\\tkeccak256(\\\"CREATORS_CHECKER_ROLE\\\");\\n\\n\\t/// @notice Fee percentages in ppm (parts per million).\\n\\tuint256 public constant FEE_DENOMINATOR = 1_000_000; // Using parts per million (ppm)\\n\\tuint256 public constant CREATOR_FEE = 20_000; // 2% fee to the creator for each trade\\n\\tuint256 public constant PROTOCOL_FEE = 20_000; // should be higher than referrer fee\\n\\tuint256 public constant REFERRER_FEE = 10_000; // if any referrer, 1% fee to the referrer (deduced from protocol fee)\\n\\n\\taddress payable public protocolTreasury;\\n\\n\\tmapping(bytes32 => Visibility) public visibilityCredits;\\n\\n\\tconstructor(\\n\\t\\taddress treasury,\\n\\t\\taddress creatorLinker\\n\\t) AccessControlDefaultAdminRules(3 days, msg.sender) {\\n\\t\\tif (PROTOCOL_FEE <= REFERRER_FEE) revert InvalidFeeParams();\\n\\n\\t\\tif (treasury == address(0)) revert InvalidAddress();\\n\\t\\tprotocolTreasury = payable(treasury);\\n\\n\\t\\tif (creatorLinker == address(0)) revert InvalidAddress();\\n\\t\\t_grantRole(CREATORS_CHECKER_ROLE, creatorLinker);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Buys a specified amount of visibility credits.\\n\\t * @dev Users must send sufficient Ether to cover the cost and fees.\\n\\t * @param visibilityId The ID representing the visibility credits.\\n\\t * @param amount The amount of credits to buy.\\n\\t * @param referrer The address of the referrer (optional).\\n\\t */\\n\\tfunction buyCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t) external payable nonReentrant {\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\n\\t\\tuint256 totalSupply = visibility.totalSupply;\\n\\n\\t\\t(\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t) = _tradeCostWithFees(totalSupply, amount, true, referrer);\\n\\n\\t\\tuint256 totalCost = tradeCost + creatorFee + protocolFee + referrerFee;\\n\\n\\t\\tif (msg.value < totalCost) {\\n\\t\\t\\trevert NotEnoughEthSent();\\n\\t\\t}\\n\\n\\t\\tif (totalSupply + amount > MAX_TOTAL_SUPPLY) {\\n\\t\\t\\trevert InvalidAmount();\\n\\t\\t}\\n\\n\\t\\ttotalSupply += amount;\\n\\n\\t\\tvisibility.totalSupply = totalSupply;\\n\\t\\tvisibility.claimableFeeBalance += creatorFee;\\n\\t\\tvisibility.creditBalances[msg.sender] += amount;\\n\\n\\t\\tif (referrerFee > 0) {\\n\\t\\t\\tAddress.sendValue(payable(referrer), referrerFee);\\n\\t\\t}\\n\\n\\t\\tAddress.sendValue(protocolTreasury, protocolFee);\\n\\n\\t\\t// Refund excess Ether sent\\n\\t\\tif (msg.value > totalCost) {\\n\\t\\t\\tAddress.sendValue(payable(msg.sender), msg.value - totalCost);\\n\\t\\t}\\n\\n\\t\\tCreditsTradeEvent memory tradeEvent = CreditsTradeEvent({\\n\\t\\t\\tfrom: msg.sender,\\n\\t\\t\\tvisibilityId: visibilityId,\\n\\t\\t\\tamount: amount,\\n\\t\\t\\tisBuy: true,\\n\\t\\t\\ttradeCost: tradeCost,\\n\\t\\t\\tcreatorFee: creatorFee,\\n\\t\\t\\tprotocolFee: protocolFee,\\n\\t\\t\\treferrerFee: referrerFee,\\n\\t\\t\\treferrer: referrer,\\n\\t\\t\\tnewTotalSupply: totalSupply,\\n\\t\\t\\tnewCurrentPrice: _getCurrentPrice(totalSupply)\\n\\t\\t});\\n\\n\\t\\temit CreditsTrade(tradeEvent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sells a specified amount of visibility credits.\\n\\t * @dev Users receive Ether minus applicable fees.\\n\\t * @param visibilityId The ID representing the visibility credits.\\n\\t * @param amount The amount of credits to sell.\\n\\t * @param referrer The address of the referrer (optional).\\n\\t */\\n\\tfunction sellCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t) external nonReentrant {\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\n\\t\\tif (visibility.creditBalances[msg.sender] < amount) {\\n\\t\\t\\trevert NotEnoughCreditsOwned();\\n\\t\\t}\\n\\n\\t\\tuint256 totalSupply = visibility.totalSupply;\\n\\n\\t\\t(\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t) = _tradeCostWithFees(totalSupply, amount, false, referrer);\\n\\n\\t\\tuint256 reimbursement = tradeCost -\\n\\t\\t\\tcreatorFee -\\n\\t\\t\\tprotocolFee -\\n\\t\\t\\treferrerFee;\\n\\n\\t\\ttotalSupply -= amount;\\n\\n\\t\\tvisibility.totalSupply = totalSupply;\\n\\t\\tvisibility.claimableFeeBalance += creatorFee;\\n\\n\\t\\tvisibility.creditBalances[msg.sender] -= amount;\\n\\n\\t\\tAddress.sendValue(payable(msg.sender), reimbursement);\\n\\n\\t\\tif (referrerFee > 0) {\\n\\t\\t\\tAddress.sendValue(payable(referrer), referrerFee);\\n\\t\\t}\\n\\n\\t\\tAddress.sendValue(protocolTreasury, protocolFee);\\n\\n\\t\\tCreditsTradeEvent memory tradeEvent = CreditsTradeEvent({\\n\\t\\t\\tfrom: msg.sender,\\n\\t\\t\\tvisibilityId: visibilityId,\\n\\t\\t\\tamount: amount,\\n\\t\\t\\tisBuy: false,\\n\\t\\t\\ttradeCost: tradeCost,\\n\\t\\t\\tcreatorFee: creatorFee,\\n\\t\\t\\tprotocolFee: protocolFee,\\n\\t\\t\\treferrerFee: referrerFee,\\n\\t\\t\\treferrer: referrer,\\n\\t\\t\\tnewTotalSupply: totalSupply,\\n\\t\\t\\tnewCurrentPrice: _getCurrentPrice(totalSupply)\\n\\t\\t});\\n\\n\\t\\temit CreditsTrade(tradeEvent);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows creators to claim their accumulated fees.\\n\\t * @param visibilityId The ID representing the visibility credits.\\n\\t */\\n\\tfunction claimCreatorFee(\\n\\t\\tstring calldata visibilityId\\n\\t) external nonReentrant {\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\n\\t\\tuint256 claimableFeeBalance = visibility.claimableFeeBalance;\\n\\n\\t\\tif (claimableFeeBalance == 0) {\\n\\t\\t\\trevert InvalidAmount();\\n\\t\\t}\\n\\n\\t\\taddress creator = visibility.creator;\\n\\n\\t\\tif (creator == address(0)) {\\n\\t\\t\\trevert InvalidCreator();\\n\\t\\t}\\n\\n\\t\\tvisibility.claimableFeeBalance = 0;\\n\\n\\t\\tAddress.sendValue(payable(creator), claimableFeeBalance);\\n\\n\\t\\temit CreatorFeeClaimed(creator, claimableFeeBalance);\\n\\t}\\n\\n\\tfunction grantCreatorTransferRole(\\n\\t\\taddress grantee\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_grantRole(CREDITS_TRANSFER_ROLE, grantee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the creator for a specific visibility ID.\\n\\t * @dev Only callable by an account with the `CREATORS_CHECKER_ROLE`.\\n\\t * @param visibilityId The ID representing the visibility credits.\\n\\t * @param creator The address of the creator, can be address(0).\\n\\t */\\n\\tfunction setCreatorVisibility(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress creator\\n\\t) external onlyRole(CREATORS_CHECKER_ROLE) {\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\t\\tvisibility.creator = creator;\\n\\n\\t\\temit CreatorVisibilitySet(visibilityId, creator);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers visibility credits between users.\\n\\t * @dev Only callable by an account with the `CREDITS_TRANSFER_ROLE`.\\n\\t * @param visibilityId The ID representing the visibility credits.\\n\\t * @param from The address to transfer credits from.\\n\\t * @param to The address to transfer credits to.\\n\\t * @param amount The amount of credits to transfer.\\n\\t */\\n\\tfunction transferCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external onlyRole(CREDITS_TRANSFER_ROLE) {\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\n\\t\\tif (visibility.creditBalances[from] < amount) {\\n\\t\\t\\trevert NotEnoughCreditsOwned();\\n\\t\\t}\\n\\n\\t\\tvisibility.creditBalances[from] -= amount;\\n\\t\\tvisibility.creditBalances[to] += amount;\\n\\n\\t\\temit CreditsTransfer(visibilityId, from, to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the protocol treasury address.\\n\\t * @dev Only callable by an account with the `DEFAULT_ADMIN_ROLE`.\\n\\t * @param treasury The address of the new protocol treasury (cannot be address(0)).\\n\\t */\\n\\tfunction updateTreasury(\\n\\t\\taddress treasury\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (treasury == address(0)) {\\n\\t\\t\\trevert InvalidAddress();\\n\\t\\t}\\n\\t\\tprotocolTreasury = payable(treasury);\\n\\t}\\n\\n\\tfunction getVisibility(\\n\\t\\tstring calldata visibilityId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress creator,\\n\\t\\t\\tuint256 totalSupply,\\n\\t\\t\\tuint256 claimableFeeBalance\\n\\t\\t)\\n\\t{\\n\\t\\tVisibility storage visibility = visibilityCredits[\\n\\t\\t\\tgetVisibilityKey(visibilityId)\\n\\t\\t];\\n\\t\\treturn (\\n\\t\\t\\tvisibility.creator,\\n\\t\\t\\tvisibility.totalSupply,\\n\\t\\t\\tvisibility.claimableFeeBalance\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getVisibilityCreditBalance(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress account\\n\\t) external view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\tvisibilityCredits[getVisibilityKey(visibilityId)].creditBalances[\\n\\t\\t\\t\\taccount\\n\\t\\t\\t];\\n\\t}\\n\\n\\tfunction getVisibilityCurrentPrice(\\n\\t\\tstring calldata visibilityId\\n\\t) external view returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_getCurrentPrice(\\n\\t\\t\\t\\tvisibilityCredits[getVisibilityKey(visibilityId)].totalSupply\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction buyCostWithFees(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCost,\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 totalSupply = visibilityCredits[getVisibilityKey(visibilityId)]\\n\\t\\t\\t.totalSupply;\\n\\t\\t(tradeCost, creatorFee, protocolFee, referrerFee) = _tradeCostWithFees(\\n\\t\\t\\ttotalSupply,\\n\\t\\t\\tamount,\\n\\t\\t\\ttrue,\\n\\t\\t\\treferrer\\n\\t\\t);\\n\\t\\ttotalCost = tradeCost + creatorFee + protocolFee + referrerFee;\\n\\t}\\n\\n\\tfunction sellCostWithFees(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 reimbursement,\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t)\\n\\t{\\n\\t\\tuint256 totalSupply = visibilityCredits[getVisibilityKey(visibilityId)]\\n\\t\\t\\t.totalSupply;\\n\\t\\t(tradeCost, creatorFee, protocolFee, referrerFee) = _tradeCostWithFees(\\n\\t\\t\\ttotalSupply,\\n\\t\\t\\tamount,\\n\\t\\t\\tfalse,\\n\\t\\t\\treferrer\\n\\t\\t);\\n\\t\\treimbursement = tradeCost - creatorFee - protocolFee - referrerFee;\\n\\t}\\n\\n\\tfunction getVisibilityKey(\\n\\t\\tstring calldata visibilityId\\n\\t) public pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(visibilityId));\\n\\t}\\n\\n\\tfunction _tradeCostWithFees(\\n\\t\\tuint256 totalSupply,\\n\\t\\tuint256 amount,\\n\\t\\tbool isBuy,\\n\\t\\taddress referrer\\n\\t)\\n\\t\\tprivate\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t)\\n\\t{\\n\\t\\tif (!isBuy) {\\n\\t\\t\\tif (totalSupply < amount) {\\n\\t\\t\\t\\trevert InvalidAmount();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 fromSupply = isBuy ? totalSupply : totalSupply - amount;\\n\\n\\t\\ttradeCost = _tradeCost(fromSupply, amount);\\n\\n\\t\\tcreatorFee = (tradeCost * CREATOR_FEE) / FEE_DENOMINATOR;\\n\\n\\t\\tif (referrer != address(0)) {\\n\\t\\t\\treferrerFee = (tradeCost * REFERRER_FEE) / FEE_DENOMINATOR;\\n\\t\\t\\tprotocolFee =\\n\\t\\t\\t\\t(tradeCost * (PROTOCOL_FEE - REFERRER_FEE)) /\\n\\t\\t\\t\\tFEE_DENOMINATOR;\\n\\t\\t} else {\\n\\t\\t\\tprotocolFee = (tradeCost * PROTOCOL_FEE) / FEE_DENOMINATOR;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the current price per visibility credit based on the total supply.\\n\\t * @param totalSupply The current total supply of visibility credits.\\n\\t * @return The current price per credit in wei.\\n\\t */\\n\\tfunction _getCurrentPrice(\\n\\t\\tuint256 totalSupply\\n\\t) private pure returns (uint256) {\\n\\t\\t// Compute the current price using the bonding curve formula\\n\\t\\treturn BASE_PRICE + (A * (totalSupply ** 2)) + (B * totalSupply);\\n\\t}\\n\\n\\tfunction _tradeCost(\\n\\t\\tuint256 fromSupply,\\n\\t\\tuint256 amount\\n\\t) private pure returns (uint256) {\\n\\t\\tif (amount == 0) {\\n\\t\\t\\trevert InvalidAmount();\\n\\t\\t}\\n\\n\\t\\t//  The ending index of the credit unit being considered.\\n\\t\\tuint256 toSupply = fromSupply + amount - 1;\\n\\n\\t\\tuint256 sumSquares;\\n\\t\\tuint256 sumFirstN;\\n\\n\\t\\tif (fromSupply == 0) {\\n\\t\\t\\t// S2(n) calculates the cumulative sum of squares from k = 1 to n:\\n\\t\\t\\t//   S2(n) = \\u2211_{k=1}^{n} k\\u00b2 = n(n + 1)(2n + 1) / 6\\n\\t\\t\\tsumSquares = (toSupply * (toSupply + 1) * (2 * toSupply + 1)) / 6;\\n\\n\\t\\t\\t// S1(n) calculates the cumulative sum from k = 1 to n:\\n\\t\\t\\t//   S1(n) = \\u2211_{k=1}^{n} k = n(n + 1) / 2\\n\\t\\t\\tsumFirstN = (toSupply * (toSupply + 1)) / 2;\\n\\t\\t} else {\\n\\t\\t\\t//    S2(n) = \\u2211_{k=1}^{n} k\\u00b2 = S2(n) = \\u2211_{k=1}^{j-1} k\\u00b2 + \\u2211_{k=j}^{n} k\\u00b2\\n\\t\\t\\t// Thus the sum of squares from fromSupply to toSupply is:\\n\\t\\t\\tuint256 sumSquaresTo = (toSupply *\\n\\t\\t\\t\\t(toSupply + 1) *\\n\\t\\t\\t\\t(2 * toSupply + 1)) / 6;\\n\\t\\t\\tuint256 sumSquaresFrom = ((fromSupply - 1) *\\n\\t\\t\\t\\tfromSupply *\\n\\t\\t\\t\\t(2 * fromSupply - 1)) / 6;\\n\\t\\t\\tsumSquares = sumSquaresTo - sumSquaresFrom;\\n\\n\\t\\t\\t// Similarly,\\n\\t\\t\\t//   S1(n) = \\u2211_{k=1}^{n} k = \\u2211_{k=1}^{j-1} k + \\u2211_{k=j}^{n} k\\n\\t\\t\\t// Thus the sum from fromSupply to toSupply is:\\n\\t\\t\\tuint256 sumFirstNTo = (toSupply * (toSupply + 1)) / 2;\\n\\t\\t\\tuint256 sumFirstNFrom = ((fromSupply - 1) * fromSupply) / 2;\\n\\t\\t\\tsumFirstN = sumFirstNTo - sumFirstNFrom;\\n\\t\\t}\\n\\n\\t\\t// Total cost is the sum of base prices and the bonding curve contributions\\n\\t\\treturn (BASE_PRICE * amount) + (A * sumSquares) + (B * sumFirstN);\\n\\t}\\n}\\n\",\"keccak256\":\"0x91fd4ce764c9771c1c1b90e3f49469f574d1f7fc3a8fc2ba7fec9be01f0a9ff8\",\"license\":\"MIT\"},\"contracts/interfaces/IVisibilityCredits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVisibilityCredits {\\n\\tstruct CreditsTradeEvent {\\n\\t\\taddress from;\\n\\t\\tstring visibilityId;\\n\\t\\tuint256 amount;\\n\\t\\tbool isBuy;\\n\\t\\tuint256 tradeCost;\\n\\t\\tuint256 creatorFee;\\n\\t\\tuint256 protocolFee;\\n\\t\\tuint256 referrerFee;\\n\\t\\taddress referrer;\\n\\t\\tuint256 newTotalSupply;\\n\\t\\tuint256 newCurrentPrice;\\n\\t}\\n\\n\\tevent CreatorFeeClaimed(address indexed creator, uint256 amount);\\n\\n\\tevent CreatorVisibilitySet(string visibilityId, address creator);\\n\\n\\tevent CreditsTrade(CreditsTradeEvent tradeEvent);\\n\\n\\tevent CreditsTransfer(\\n\\t\\tstring visibilityId,\\n\\t\\taddress indexed from,\\n\\t\\taddress indexed to,\\n\\t\\tuint256 amount\\n\\t);\\n\\n\\terror InvalidAddress();\\n\\terror InvalidCreator();\\n\\terror InvalidAmount();\\n\\terror InvalidFeeParams();\\n\\terror NotEnoughEthSent();\\n\\terror NotEnoughCreditsOwned();\\n\\n\\tfunction buyCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t) external payable;\\n\\n\\tfunction sellCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t) external;\\n\\n\\tfunction claimCreatorFee(string calldata visibilityId) external;\\n\\n\\tfunction setCreatorVisibility(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress creator\\n\\t) external;\\n\\n\\tfunction transferCredits(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction updateTreasury(address treasury) external;\\n\\n\\tfunction getVisibility(\\n\\t\\tstring calldata visibilityId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress creator,\\n\\t\\t\\tuint256 totalSupply,\\n\\t\\t\\tuint256 claimableFeeBalance\\n\\t\\t);\\n\\n\\tfunction getVisibilityCreditBalance(\\n\\t\\tstring calldata visibilityId,\\n\\t\\taddress account\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVisibilityCurrentPrice(\\n\\t\\tstring calldata visibilityId\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVisibilityKey(\\n\\t\\tstring calldata visibilityId\\n\\t) external pure returns (bytes32);\\n\\n\\tfunction buyCostWithFees(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCost,\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t);\\n\\n\\tfunction sellCostWithFees(\\n\\t\\tstring calldata visibilityId,\\n\\t\\tuint256 amount,\\n\\t\\taddress referrer\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 reimbourcement,\\n\\t\\t\\tuint256 tradeCost,\\n\\t\\t\\tuint256 creatorFee,\\n\\t\\t\\tuint256 protocolFee,\\n\\t\\t\\tuint256 referrerFee\\n\\t\\t);\\n}\\n\",\"keccak256\":\"0x67a8c0ce902af80b02624d024148db47030b55c2e9d9d6a0ab0b20f8e3a7db08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001335762002b0290601f38839003908101601f19168201906001600160401b0382118383101762000138578083916040958694855283398101031262000133576200005d602062000055836200014e565b92016200014e565b9033156200011b57600180546001600160d01b03166107e960d71b1790556002546001600160a01b03918282166200010a57336001600160a01b03199283168117600255839190620000af9062000163565b50600160035516908115620000f9576004541617600455811615620000e857620000d990620001e3565b505161285c9081620002868239f35b815163e6c4247b60e01b8152600490fd5b845163e6c4247b60e01b8152600490fd5b8451631fe1e13d60e11b8152600490fd5b8251636116401160e11b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200013357565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16620001df57818052816020526040822081835260205260408220600160ff19825416179055339160008051602062002ae28339815191528180a4600190565b5090565b6001600160a01b031660008181527f90e7ad853e9fac4d43ebdcc2110730a1fc757f3400422120e55dadc8243cafee60205260408120549091907f43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d13499060ff166200028057808352826020526040832082845260205260408320600160ff1982541617905560008051602062002ae2833981519152339380a4600190565b50509056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a71461184657508163022d63fb1461182857816302304c76146117e75781630aa6220b1461171e5781630b4501fd146115bf5781630ec3d9b0146116e3578163162e7c2c146115c45781631a7dfa9f146115bf5781632268a972146113ca578163248a9ca3146113a05781632f2ff15d1461135c57816331ffa145146112e1578163320ba8f71461124a57816332e7c5bf1461122957816333039d3d1461120657816336568abe146110a6578163406f924814610f9e57816357adb29514610f81578163634e93da14610e4c578163649a5ec714610c2c5781637974f3d814610c025781637f51bb1f14610b6e578163803db96d14610b3a57816384ef8ffc14610aad57816386f539fc14610ae25781638da5cb5b14610aad57816391d1485414610a5b578163a1eda53c146109e5578163a217fddf146109ca578163a2cd009e14610992578163c42d17e214610936578163cc8463c81461090a578163ce9823fa14610768578163cefc1429146105ed578163cf6eefb7146105a7578163d547741f14610538578163d602b9fd146104b9578163d73792a91461049b578163d8b5a8b71461044d578163eccc35fe1461027a57508063f446c1d01461025b578063f86325ed1461023b5763fb29b8c2146101fe57600080fd5b34610237578160031936011261023757602090517f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a1848152f35b5080fd5b503461023757816003193601126102375760209051655af3107a40008152f35b50346102375781600319360112610237576020905164037e11d6008152f35b8383346102375761028a36611990565b61029694929194612276565b6102a082856122f0565b86526005602052828620966003880191338852826020528685892054106104255788600188999a01938454916102d7848b856126ee565b9586849f94926102eb858299969895611fbf565b906102f591611fbf565b906102ff91611fbf565b9361030991611fbf565b8099556002018381549061031c91611fb2565b9055338e52602052888d208054610334908d90611fbf565b905561034090336121c1565b8215159a6103f59a6103b56103ab9b7f0e2357d853a109acf13b03ccdd714c5e3dd7047234851e6ed9e115357b63caee9e610400575b6103988673ffffffffffffffffffffffffffffffffffffffff809b54166121c1565b6103a18a6127dd565b9a8c519d8e611fcc565b338e523691612093565b60208c0152898b01528c60608b015260808a015260a089015260c088015260e08701521661010085015261012084015261014083015251918291826120ca565b0390a1600160035580f35b6104208773ffffffffffffffffffffffffffffffffffffffff8a166121c1565b610376565b5083517f15761ddb000000000000000000000000000000000000000000000000000000008152fd5b505034610237578060209261046b61046436611a01565b92916122f0565b82526005855273ffffffffffffffffffffffffffffffffffffffff60038484200191168252845220549051908152f35b50503461023757816003193601126102375760209051620f42408152f35b83346105355780600319360112610535576104d2611a51565b600180547fffffffffffff0000000000000000000000000000000000000000000000000000811690915560a01c65ffffffffffff1661050e5780f35b7f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a96051098180a180f35b80fd5b83915034610237578260031936011261023757803561055561194a565b9181156105805750610577600184958361057c96528660205286200154611ac2565b611d25565b5080f35b84517f3fc3c27a000000000000000000000000000000000000000000000000000000008152fd5b82843461053557806003193601126105355750600154815173ffffffffffffffffffffffffffffffffffffffff8216815260a09190911c65ffffffffffff166020820152f35b83833461023757816003193601126102375760015473ffffffffffffffffffffffffffffffffffffffff90811633036107395760015473ffffffffffffffffffffffffffffffffffffffff811692919060a01c65ffffffffffff168015801561072f575b61070057506002549061068c817fffffffffffffffffffffffff00000000000000000000000000000000000000009384811660025516611d8f565b50600254928184166106d857506106ac9495508316911617600255611bc5565b507fffffffffffff00000000000000000000000000000000000000000000000000006001541660015580f35b8690517f3fc3c27a000000000000000000000000000000000000000000000000000000008152fd5b856024918451917f19ca5ebb000000000000000000000000000000000000000000000000000000008352820152fd5b5042811015610651565b81517fc22c80220000000000000000000000000000000000000000000000000000000081523381860152602490fd5b83833461023757608060031936011261023757823567ffffffffffffffff8111610906576107999036908501611917565b6107a494919461194a565b926044359373ffffffffffffffffffffffffffffffffffffffff9081861680960361090257606435907f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a18492838952602093898552858a20338b52855260ff868b205416156108cc5750610817868b6122f0565b8952600584526003858a200191169586895281845282858a2054106108a55750879861089b91877f97f8390f303d41a6db07b9e74de160b187da60bc50baf55ed8cdf777ba2d6a8498999a52808552858b20610874858254611fbf565b9055898b528452848a20610889848254611fb2565b905584519585879687528601916122b1565b918301520390a380f35b84517f15761ddb000000000000000000000000000000000000000000000000000000008152fd5b876044918751917fe2517d3f00000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b8680fd5b8280fd5b50503461023757816003193601126102375760209065ffffffffffff61092e611ee5565b915191168152f35b90503461090657602060031936011261090657803567ffffffffffffffff811161098e578260209461097961097361098795600195369101611917565b906122f0565b8152600586522001546127dd565b9051908152f35b8380fd5b8284346105355760206003193601126105355782359067ffffffffffffffff8211610535575061097360209361098792369101611917565b50503461023757816003193601126102375751908152602090f35b8284346105355780600319360112610535576002548060d01c9182151580610a51575b15610a43575065ffffffffffff610a3f9160a01c1691925b5165ffffffffffff928316815292909116602083015281906040820190565b0390f35b92839250610a3f9150610a20565b5042831015610a08565b9050346109065781600319360112610906578160209360ff92610a7c61194a565b9035825281865273ffffffffffffffffffffffffffffffffffffffff83832091168252855220541690519015158152f35b50503461023757816003193601126102375760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b90503461090657602060031936011261090657358252600560209081529181902080546001820154600290920154925173ffffffffffffffffffffffffffffffffffffffff9091168152928301526040820152606090f35b8284346105355780600319360112610535575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b919050346109065760206003193601126109065773ffffffffffffffffffffffffffffffffffffffff610b9f61196d565b610ba7611a51565b16908115610bda57507fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b9050517fe6c4247b000000000000000000000000000000000000000000000000000000008152fd5b83346105355760206003193601126105355761057c610c1f61196d565b610c27611a51565b611ae8565b83833461023757602060031936011261023757823565ffffffffffff80821690818303610e4857610c5b611a51565b610c6442611f67565b9181610c6e611ee5565b1680821115610de257509495507ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b94610d5292610cbc9290916206978080821015610ddb57505b1690611f1e565b926002548060d01c80610d58575b50506002805473ffffffffffffffffffffffffffffffffffffffff1660a085901b79ffffffffffff0000000000000000000000000000000000000000161760d086901b7fffffffffffff0000000000000000000000000000000000000000000000000000161790555165ffffffffffff92831681529190921660208201529081906040820190565b0390a180f35b421115610db15779ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff00000000000000000000000000000000000000000000000000006001549260301b169116176001555b8680610cca565b507f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec58680a1610daa565b9050610cb5565b03908111610e1c577ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b949550610d5291610cbc9190611f1e565b6024856011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b505034610237576020600319360112610237577f3377dc44241e779dd06afab5b788a35ca5f3b778836e2990bdb26a2a4b2e5ed66020610e8a61196d565b610e92611a51565b610eac610e9e42611f67565b610ea6611ee5565b90611f1e565b9073ffffffffffffffffffffffffffffffffffffffff610eef6001549065ffffffffffff73ffffffffffffffffffffffffffffffffffffffff83169260a01c1690565b9290501694600154867fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffff00000000000000000000000000000000000000008660a01b169216171760015565ffffffffffff809216610f58575b5191168152a280f35b7f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a96051098780a1610f4f565b505034610237578160031936011261023757602090516127108152f35b9190503461090657602060031936011261090657813567ffffffffffffffff811161098e57610fd3610fe19136908501611917565b90610fdc612276565b6122f0565b835260056020528083209060028201805492831561107e575473ffffffffffffffffffffffffffffffffffffffff16938415611057575091602091857fb0941a79b0a1d2dc32262e01138093b93ba4e92878c9b282875850dec054f009945561104a82866121c1565b51908152a2600160035580f35b82517fcb6e5344000000000000000000000000000000000000000000000000000000008152fd5b8483517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b83833461023757806003193601126102375782356110c261194a565b918115806111e2575b611120575b3373ffffffffffffffffffffffffffffffffffffffff8416036110f857509061057c91611d25565b8490517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b60015465ffffffffffff60a082901c169073ffffffffffffffffffffffffffffffffffffffff16158015906111d2575b80156111c0575b61118957507fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff600154166001556110d0565b8565ffffffffffff60249351927f19ca5ebb0000000000000000000000000000000000000000000000000000000084521690820152fd5b504265ffffffffffff82161015611157565b5065ffffffffffff811615611150565b5073ffffffffffffffffffffffffffffffffffffffff8060025416908416146110cb565b5050346102375781600319360112610237576020905167ffffffffffffffff8152f35b505034610237578160031936011261023757602090516516bcc41e90008152f35b90503461090657602060031936011261090657803567ffffffffffffffff811161098e5761097383949261128092369101611917565b815260056020522090610a3f73ffffffffffffffffffffffffffffffffffffffff835416916002600185015494015490519384938460409194939273ffffffffffffffffffffffffffffffffffffffff606083019616825260208201520152565b50503461023757611318610a3f926113096001846112fe36611990565b9692959190956122f0565b815260056020522001546126ee565b916113328361132d8461132d85899b99611fbf565b611fbf565b9451958695869192608093969594919660a084019784526020840152604083015260608201520152565b83915034610237578260031936011261023757803561137961194a565b918115610580575061139b600184958361057c96528660205286200154611ac2565b611c80565b90503461090657602060031936011261090657816020936001923581528085522001549051908152f35b90506113d536611990565b906113e1949294612276565b6113eb85856122f0565b87526005602052858720600181019485549061140885858461236c565b9692939194909561142688611421896114218a8a611fb2565b611fb2565b918234106115975767ffffffffffffffff6114418683611fb2565b1161156f576103f59c9996938f937f0e2357d853a109acf13b03ccdd714c5e3dd7047234851e6ed9e115357b63caee9f6103ab9e9b98956003829f9c999661148c886114f098611fb2565b9e8f90556002810161149f8b8254611fb2565b905533835201602052206114b4858254611fb2565b90558761154a575b6114de8773ffffffffffffffffffffffffffffffffffffffff809c54166121c1565b803411611531575b506103a18a6127dd565b60208c0152898b0152600160608b015260808a015260a089015260c088015260e08701521661010085015261012084015261014083015251918291826120ca565b61153e6115449134611fbf565b336121c1565b386114e6565b61156a8873ffffffffffffffffffffffffffffffffffffffff8b166121c1565b6114bc565b8a8e517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b8a8e517fe16b18b4000000000000000000000000000000000000000000000000000000008152fd5b6119e4565b838334610237576115d436611a01565b909291947f43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d13498086528560205283862033875260205260ff8487205416156116ad5750506116a185611647857f13ef5290f6bc062f4adcc6a4a09d9f745ebba9e80fac6b92b0f1147fce43232897986122f0565b8752600560205273ffffffffffffffffffffffffffffffffffffffff848820931692837fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905583519484869586528501916122b1565b9060208301520390a180f35b604492508351917fe2517d3f00000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b505034610237578160031936011261023757602090517f43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d13498152f35b8334610535578060031936011261053557611737611a51565b6002548060d01c80611764575b8273ffffffffffffffffffffffffffffffffffffffff6002541660025580f35b4211156117bd5779ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff00000000000000000000000000000000000000000000000000006001549260301b169116176001555b8180611744565b507f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec58180a16117b6565b50503461023757611813610a3f926118046001846112fe36611990565b8152600560205220015461236c565b91611332836114218461142185899b99611fb2565b50503461023757816003193601126102375760209051620697808152f35b84913461090657602060031936011261090657357fffffffff00000000000000000000000000000000000000000000000000000000811680910361090657602092507f314987860000000000000000000000000000000000000000000000000000000081149081156118ba575b5015158152f35b7f7965db0b000000000000000000000000000000000000000000000000000000008114915081156118ed575b50836118b3565b7f01ffc9a700000000000000000000000000000000000000000000000000000000915014836118e6565b9181601f840112156119455782359167ffffffffffffffff8311611945576020838186019501011161194557565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361194557565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361194557565b6060600319820112611945576004359067ffffffffffffffff8211611945576119bb91600401611917565b90916024359060443573ffffffffffffffffffffffffffffffffffffffff811681036119455790565b34611945576000600319360112611945576020604051614e208152f35b6040600319820112611945576004359067ffffffffffffffff821161194557611a2c91600401611917565b909160243573ffffffffffffffffffffffffffffffffffffffff811681036119455790565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615611a8b5750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b80600052600060205260406000203360005260205260ff6040600020541615611a8b5750565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fa947032688ddb2fe0e5f4dccbb9c0c3b45c325f4b9a00a607b6e417cb9394f6b60205260408120549091907f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a1849060ff16611bc05780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16611c7c5781805281602052604082208183526020526040822060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b5090565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff60408420541615600014611bc05780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90611d3b91801580611d6b575b611d3e57611e44565b90565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060025416600255611e44565b5073ffffffffffffffffffffffffffffffffffffffff806002541690831614611d32565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff1615611c7c578180528160205260408220818352602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8180a4600190565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416600014611bc0578083528260205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6002548060d01c8015159081611f14575b5015611f0a5760a01c65ffffffffffff1690565b5060015460d01c90565b9050421138611ef6565b91909165ffffffffffff80809416911601918211611f3857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b65ffffffffffff90818111611f7a571690565b604490604051907f6dfcc650000000000000000000000000000000000000000000000000000000008252603060048301526024820152fd5b91908201809211611f3857565b91908203918211611f3857565b610160810190811067ffffffffffffffff821117611fe957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611fe957604052565b67ffffffffffffffff8111611fe957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261209f82612059565b916120ad6040519384612018565b829481845281830111611945578281602093846000960137010152565b60209182825273ffffffffffffffffffffffffffffffffffffffff9283825116818401528082015191610160918260408601528351938461018087015260005b8581106121ac5750505091601f917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0936101a096600088858901015260408201516060880152606082015115156080880152608082015160a088015260a082015160c088015260c082015160e088015260e082015161010090818901528201511661012090818801528101519061014091828801520151908501520116010190565b8181018301518782016101a00152820161210a565b81471061224657600080809373ffffffffffffffffffffffffffffffffffffffff8294165af13d15612241573d6121f781612059565b906122056040519283612018565b8152600060203d92013e5b1561221757565b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b612210565b60246040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152fd5b600260035414612287576002600355565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b61233c6123109160405192839160208301956020875260408401916122b1565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612018565b51902090565b9061271091828102928184041490151715611f3857565b81810292918115918404141715611f3857565b60009391849181156126c4576123828282611fb2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019282841161257c57806125a95750506123bf8183612359565b8260011b907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416840361257c576001820180921161257c5761240861240f9392600692612359565b0492612359565b60011c915b655af3107a4000908082029182040361254f5764037e11d600918083029283040361254f579061244391611fb2565b6516bcc41e90009180830292830403612522579061246091611fb2565b93614e209081860292861592878504148317156124f557620f4240938490049573ffffffffffffffffffffffffffffffffffffffff16156124ed575061271091828702928784041417156124c05750819004906124bc85612342565b0491565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b925050508291565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b90916125b58185612359565b8460011b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828716870361266a576001820180921161266a576006916125fb91612359565b04908484019484861161266a576126128587612359565b908560011b928616860361269757820191821161266a579261264c61266496959360066126456126529561265b98612359565b0490611fbf565b96612359565b60011c92612359565b60011c90611fbf565b91612414565b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60248d7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60046040517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b6000939184918181106126c4578161270591611fbf565b81156126c4576123828282611fb2565b80156127d75780806001146127d0576002146127ca576001908161013382101682600b831016176127c257906002815b80821161277b575050817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048111611f38570290565b9092807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048111611f38578184166127b9575b800292811c90612745565b809202916127ae565b600291500a90565b50600490565b5050600190565b50600090565b6127e681612715565b9064037e11d6009180830292830403611f3857655af3107a4000918201809211611f38576516bcc41e90009080820291820403611f3857611d3b91611fb256fea2646970667358221220a23dbb1ca4ce81de64067382bef9e24b41ee89efe2864f44a76f6cd034a52f5664736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a71461184657508163022d63fb1461182857816302304c76146117e75781630aa6220b1461171e5781630b4501fd146115bf5781630ec3d9b0146116e3578163162e7c2c146115c45781631a7dfa9f146115bf5781632268a972146113ca578163248a9ca3146113a05781632f2ff15d1461135c57816331ffa145146112e1578163320ba8f71461124a57816332e7c5bf1461122957816333039d3d1461120657816336568abe146110a6578163406f924814610f9e57816357adb29514610f81578163634e93da14610e4c578163649a5ec714610c2c5781637974f3d814610c025781637f51bb1f14610b6e578163803db96d14610b3a57816384ef8ffc14610aad57816386f539fc14610ae25781638da5cb5b14610aad57816391d1485414610a5b578163a1eda53c146109e5578163a217fddf146109ca578163a2cd009e14610992578163c42d17e214610936578163cc8463c81461090a578163ce9823fa14610768578163cefc1429146105ed578163cf6eefb7146105a7578163d547741f14610538578163d602b9fd146104b9578163d73792a91461049b578163d8b5a8b71461044d578163eccc35fe1461027a57508063f446c1d01461025b578063f86325ed1461023b5763fb29b8c2146101fe57600080fd5b34610237578160031936011261023757602090517f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a1848152f35b5080fd5b503461023757816003193601126102375760209051655af3107a40008152f35b50346102375781600319360112610237576020905164037e11d6008152f35b8383346102375761028a36611990565b61029694929194612276565b6102a082856122f0565b86526005602052828620966003880191338852826020528685892054106104255788600188999a01938454916102d7848b856126ee565b9586849f94926102eb858299969895611fbf565b906102f591611fbf565b906102ff91611fbf565b9361030991611fbf565b8099556002018381549061031c91611fb2565b9055338e52602052888d208054610334908d90611fbf565b905561034090336121c1565b8215159a6103f59a6103b56103ab9b7f0e2357d853a109acf13b03ccdd714c5e3dd7047234851e6ed9e115357b63caee9e610400575b6103988673ffffffffffffffffffffffffffffffffffffffff809b54166121c1565b6103a18a6127dd565b9a8c519d8e611fcc565b338e523691612093565b60208c0152898b01528c60608b015260808a015260a089015260c088015260e08701521661010085015261012084015261014083015251918291826120ca565b0390a1600160035580f35b6104208773ffffffffffffffffffffffffffffffffffffffff8a166121c1565b610376565b5083517f15761ddb000000000000000000000000000000000000000000000000000000008152fd5b505034610237578060209261046b61046436611a01565b92916122f0565b82526005855273ffffffffffffffffffffffffffffffffffffffff60038484200191168252845220549051908152f35b50503461023757816003193601126102375760209051620f42408152f35b83346105355780600319360112610535576104d2611a51565b600180547fffffffffffff0000000000000000000000000000000000000000000000000000811690915560a01c65ffffffffffff1661050e5780f35b7f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a96051098180a180f35b80fd5b83915034610237578260031936011261023757803561055561194a565b9181156105805750610577600184958361057c96528660205286200154611ac2565b611d25565b5080f35b84517f3fc3c27a000000000000000000000000000000000000000000000000000000008152fd5b82843461053557806003193601126105355750600154815173ffffffffffffffffffffffffffffffffffffffff8216815260a09190911c65ffffffffffff166020820152f35b83833461023757816003193601126102375760015473ffffffffffffffffffffffffffffffffffffffff90811633036107395760015473ffffffffffffffffffffffffffffffffffffffff811692919060a01c65ffffffffffff168015801561072f575b61070057506002549061068c817fffffffffffffffffffffffff00000000000000000000000000000000000000009384811660025516611d8f565b50600254928184166106d857506106ac9495508316911617600255611bc5565b507fffffffffffff00000000000000000000000000000000000000000000000000006001541660015580f35b8690517f3fc3c27a000000000000000000000000000000000000000000000000000000008152fd5b856024918451917f19ca5ebb000000000000000000000000000000000000000000000000000000008352820152fd5b5042811015610651565b81517fc22c80220000000000000000000000000000000000000000000000000000000081523381860152602490fd5b83833461023757608060031936011261023757823567ffffffffffffffff8111610906576107999036908501611917565b6107a494919461194a565b926044359373ffffffffffffffffffffffffffffffffffffffff9081861680960361090257606435907f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a18492838952602093898552858a20338b52855260ff868b205416156108cc5750610817868b6122f0565b8952600584526003858a200191169586895281845282858a2054106108a55750879861089b91877f97f8390f303d41a6db07b9e74de160b187da60bc50baf55ed8cdf777ba2d6a8498999a52808552858b20610874858254611fbf565b9055898b528452848a20610889848254611fb2565b905584519585879687528601916122b1565b918301520390a380f35b84517f15761ddb000000000000000000000000000000000000000000000000000000008152fd5b876044918751917fe2517d3f00000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b8680fd5b8280fd5b50503461023757816003193601126102375760209065ffffffffffff61092e611ee5565b915191168152f35b90503461090657602060031936011261090657803567ffffffffffffffff811161098e578260209461097961097361098795600195369101611917565b906122f0565b8152600586522001546127dd565b9051908152f35b8380fd5b8284346105355760206003193601126105355782359067ffffffffffffffff8211610535575061097360209361098792369101611917565b50503461023757816003193601126102375751908152602090f35b8284346105355780600319360112610535576002548060d01c9182151580610a51575b15610a43575065ffffffffffff610a3f9160a01c1691925b5165ffffffffffff928316815292909116602083015281906040820190565b0390f35b92839250610a3f9150610a20565b5042831015610a08565b9050346109065781600319360112610906578160209360ff92610a7c61194a565b9035825281865273ffffffffffffffffffffffffffffffffffffffff83832091168252855220541690519015158152f35b50503461023757816003193601126102375760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b90503461090657602060031936011261090657358252600560209081529181902080546001820154600290920154925173ffffffffffffffffffffffffffffffffffffffff9091168152928301526040820152606090f35b8284346105355780600319360112610535575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b919050346109065760206003193601126109065773ffffffffffffffffffffffffffffffffffffffff610b9f61196d565b610ba7611a51565b16908115610bda57507fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b9050517fe6c4247b000000000000000000000000000000000000000000000000000000008152fd5b83346105355760206003193601126105355761057c610c1f61196d565b610c27611a51565b611ae8565b83833461023757602060031936011261023757823565ffffffffffff80821690818303610e4857610c5b611a51565b610c6442611f67565b9181610c6e611ee5565b1680821115610de257509495507ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b94610d5292610cbc9290916206978080821015610ddb57505b1690611f1e565b926002548060d01c80610d58575b50506002805473ffffffffffffffffffffffffffffffffffffffff1660a085901b79ffffffffffff0000000000000000000000000000000000000000161760d086901b7fffffffffffff0000000000000000000000000000000000000000000000000000161790555165ffffffffffff92831681529190921660208201529081906040820190565b0390a180f35b421115610db15779ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff00000000000000000000000000000000000000000000000000006001549260301b169116176001555b8680610cca565b507f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec58680a1610daa565b9050610cb5565b03908111610e1c577ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b949550610d5291610cbc9190611f1e565b6024856011887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8480fd5b505034610237576020600319360112610237577f3377dc44241e779dd06afab5b788a35ca5f3b778836e2990bdb26a2a4b2e5ed66020610e8a61196d565b610e92611a51565b610eac610e9e42611f67565b610ea6611ee5565b90611f1e565b9073ffffffffffffffffffffffffffffffffffffffff610eef6001549065ffffffffffff73ffffffffffffffffffffffffffffffffffffffff83169260a01c1690565b9290501694600154867fffffffffffff000000000000000000000000000000000000000000000000000079ffffffffffff00000000000000000000000000000000000000008660a01b169216171760015565ffffffffffff809216610f58575b5191168152a280f35b7f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a96051098780a1610f4f565b505034610237578160031936011261023757602090516127108152f35b9190503461090657602060031936011261090657813567ffffffffffffffff811161098e57610fd3610fe19136908501611917565b90610fdc612276565b6122f0565b835260056020528083209060028201805492831561107e575473ffffffffffffffffffffffffffffffffffffffff16938415611057575091602091857fb0941a79b0a1d2dc32262e01138093b93ba4e92878c9b282875850dec054f009945561104a82866121c1565b51908152a2600160035580f35b82517fcb6e5344000000000000000000000000000000000000000000000000000000008152fd5b8483517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b83833461023757806003193601126102375782356110c261194a565b918115806111e2575b611120575b3373ffffffffffffffffffffffffffffffffffffffff8416036110f857509061057c91611d25565b8490517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b60015465ffffffffffff60a082901c169073ffffffffffffffffffffffffffffffffffffffff16158015906111d2575b80156111c0575b61118957507fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff600154166001556110d0565b8565ffffffffffff60249351927f19ca5ebb0000000000000000000000000000000000000000000000000000000084521690820152fd5b504265ffffffffffff82161015611157565b5065ffffffffffff811615611150565b5073ffffffffffffffffffffffffffffffffffffffff8060025416908416146110cb565b5050346102375781600319360112610237576020905167ffffffffffffffff8152f35b505034610237578160031936011261023757602090516516bcc41e90008152f35b90503461090657602060031936011261090657803567ffffffffffffffff811161098e5761097383949261128092369101611917565b815260056020522090610a3f73ffffffffffffffffffffffffffffffffffffffff835416916002600185015494015490519384938460409194939273ffffffffffffffffffffffffffffffffffffffff606083019616825260208201520152565b50503461023757611318610a3f926113096001846112fe36611990565b9692959190956122f0565b815260056020522001546126ee565b916113328361132d8461132d85899b99611fbf565b611fbf565b9451958695869192608093969594919660a084019784526020840152604083015260608201520152565b83915034610237578260031936011261023757803561137961194a565b918115610580575061139b600184958361057c96528660205286200154611ac2565b611c80565b90503461090657602060031936011261090657816020936001923581528085522001549051908152f35b90506113d536611990565b906113e1949294612276565b6113eb85856122f0565b87526005602052858720600181019485549061140885858461236c565b9692939194909561142688611421896114218a8a611fb2565b611fb2565b918234106115975767ffffffffffffffff6114418683611fb2565b1161156f576103f59c9996938f937f0e2357d853a109acf13b03ccdd714c5e3dd7047234851e6ed9e115357b63caee9f6103ab9e9b98956003829f9c999661148c886114f098611fb2565b9e8f90556002810161149f8b8254611fb2565b905533835201602052206114b4858254611fb2565b90558761154a575b6114de8773ffffffffffffffffffffffffffffffffffffffff809c54166121c1565b803411611531575b506103a18a6127dd565b60208c0152898b0152600160608b015260808a015260a089015260c088015260e08701521661010085015261012084015261014083015251918291826120ca565b61153e6115449134611fbf565b336121c1565b386114e6565b61156a8873ffffffffffffffffffffffffffffffffffffffff8b166121c1565b6114bc565b8a8e517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b8a8e517fe16b18b4000000000000000000000000000000000000000000000000000000008152fd5b6119e4565b838334610237576115d436611a01565b909291947f43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d13498086528560205283862033875260205260ff8487205416156116ad5750506116a185611647857f13ef5290f6bc062f4adcc6a4a09d9f745ebba9e80fac6b92b0f1147fce43232897986122f0565b8752600560205273ffffffffffffffffffffffffffffffffffffffff848820931692837fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905583519484869586528501916122b1565b9060208301520390a180f35b604492508351917fe2517d3f00000000000000000000000000000000000000000000000000000000835233908301526024820152fd5b505034610237578160031936011261023757602090517f43ab615f45e426ee136a7c361cb7eec81a0a41f7c8e223ef2ba841ac2d6d13498152f35b8334610535578060031936011261053557611737611a51565b6002548060d01c80611764575b8273ffffffffffffffffffffffffffffffffffffffff6002541660025580f35b4211156117bd5779ffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff00000000000000000000000000000000000000000000000000006001549260301b169116176001555b8180611744565b507f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec58180a16117b6565b50503461023757611813610a3f926118046001846112fe36611990565b8152600560205220015461236c565b91611332836114218461142185899b99611fb2565b50503461023757816003193601126102375760209051620697808152f35b84913461090657602060031936011261090657357fffffffff00000000000000000000000000000000000000000000000000000000811680910361090657602092507f314987860000000000000000000000000000000000000000000000000000000081149081156118ba575b5015158152f35b7f7965db0b000000000000000000000000000000000000000000000000000000008114915081156118ed575b50836118b3565b7f01ffc9a700000000000000000000000000000000000000000000000000000000915014836118e6565b9181601f840112156119455782359167ffffffffffffffff8311611945576020838186019501011161194557565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361194557565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361194557565b6060600319820112611945576004359067ffffffffffffffff8211611945576119bb91600401611917565b90916024359060443573ffffffffffffffffffffffffffffffffffffffff811681036119455790565b34611945576000600319360112611945576020604051614e208152f35b6040600319820112611945576004359067ffffffffffffffff821161194557611a2c91600401611917565b909160243573ffffffffffffffffffffffffffffffffffffffff811681036119455790565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615611a8b5750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b80600052600060205260406000203360005260205260ff6040600020541615611a8b5750565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fa947032688ddb2fe0e5f4dccbb9c0c3b45c325f4b9a00a607b6e417cb9394f6b60205260408120549091907f4032bac08a63c53f52fb370aca24a5388e07cc0d7ad5c5253fe4892e6710a1849060ff16611bc05780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16611c7c5781805281602052604082208183526020526040822060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b5090565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff60408420541615600014611bc05780835282602052604083208284526020526040832060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b90611d3b91801580611d6b575b611d3e57611e44565b90565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060025416600255611e44565b5073ffffffffffffffffffffffffffffffffffffffff806002541690831614611d32565b73ffffffffffffffffffffffffffffffffffffffff1660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff1615611c7c578180528160205260408220818352602052604082207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905533917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b8180a4600190565b906000918083528260205273ffffffffffffffffffffffffffffffffffffffff6040842092169182845260205260ff604084205416600014611bc0578083528260205260408320828452602052604083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6002548060d01c8015159081611f14575b5015611f0a5760a01c65ffffffffffff1690565b5060015460d01c90565b9050421138611ef6565b91909165ffffffffffff80809416911601918211611f3857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b65ffffffffffff90818111611f7a571690565b604490604051907f6dfcc650000000000000000000000000000000000000000000000000000000008252603060048301526024820152fd5b91908201809211611f3857565b91908203918211611f3857565b610160810190811067ffffffffffffffff821117611fe957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117611fe957604052565b67ffffffffffffffff8111611fe957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b92919261209f82612059565b916120ad6040519384612018565b829481845281830111611945578281602093846000960137010152565b60209182825273ffffffffffffffffffffffffffffffffffffffff9283825116818401528082015191610160918260408601528351938461018087015260005b8581106121ac5750505091601f917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0936101a096600088858901015260408201516060880152606082015115156080880152608082015160a088015260a082015160c088015260c082015160e088015260e082015161010090818901528201511661012090818801528101519061014091828801520151908501520116010190565b8181018301518782016101a00152820161210a565b81471061224657600080809373ffffffffffffffffffffffffffffffffffffffff8294165af13d15612241573d6121f781612059565b906122056040519283612018565b8152600060203d92013e5b1561221757565b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b612210565b60246040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152fd5b600260035414612287576002600355565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b61233c6123109160405192839160208301956020875260408401916122b1565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612018565b51902090565b9061271091828102928184041490151715611f3857565b81810292918115918404141715611f3857565b60009391849181156126c4576123828282611fb2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8082019282841161257c57806125a95750506123bf8183612359565b8260011b907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416840361257c576001820180921161257c5761240861240f9392600692612359565b0492612359565b60011c915b655af3107a4000908082029182040361254f5764037e11d600918083029283040361254f579061244391611fb2565b6516bcc41e90009180830292830403612522579061246091611fb2565b93614e209081860292861592878504148317156124f557620f4240938490049573ffffffffffffffffffffffffffffffffffffffff16156124ed575061271091828702928784041417156124c05750819004906124bc85612342565b0491565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b925050508291565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b90916125b58185612359565b8460011b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91828716870361266a576001820180921161266a576006916125fb91612359565b04908484019484861161266a576126128587612359565b908560011b928616860361269757820191821161266a579261264c61266496959360066126456126529561265b98612359565b0490611fbf565b96612359565b60011c92612359565b60011c90611fbf565b91612414565b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60248d7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60046040517f2c5211c6000000000000000000000000000000000000000000000000000000008152fd5b6000939184918181106126c4578161270591611fbf565b81156126c4576123828282611fb2565b80156127d75780806001146127d0576002146127ca576001908161013382101682600b831016176127c257906002815b80821161277b575050817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048111611f38570290565b9092807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048111611f38578184166127b9575b800292811c90612745565b809202916127ae565b600291500a90565b50600490565b5050600190565b50600090565b6127e681612715565b9064037e11d6009180830292830403611f3857655af3107a4000918201809211611f38576516bcc41e90009080820291820403611f3857611d3b91611fb256fea2646970667358221220a23dbb1ca4ce81de64067382bef9e24b41ee89efe2864f44a76f6cd034a52f5664736f6c63430008140033",
  "devdoc": {
    "details": "Users can spend these credits for ad purposes.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlEnforcedDefaultAdminDelay(uint48)": [
        {
          "details": "The delay for transferring the default admin delay is enforced and the operation must wait until `schedule`. NOTE: `schedule` can be 0 indicating there's no transfer scheduled."
        }
      ],
      "AccessControlEnforcedDefaultAdminRules()": [
        {
          "details": "At least one of the following rules was violated: - The `DEFAULT_ADMIN_ROLE` must only be managed by itself. - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time. - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps."
        }
      ],
      "AccessControlInvalidDefaultAdmin(address)": [
        {
          "details": "The new default admin is not a valid default admin."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "events": {
      "DefaultAdminDelayChangeCanceled()": {
        "details": "Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass."
      },
      "DefaultAdminDelayChangeScheduled(uint48,uint48)": {
        "details": "Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next delay to be applied between default admin transfer after `effectSchedule` has passed."
      },
      "DefaultAdminTransferCanceled()": {
        "details": "Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule."
      },
      "DefaultAdminTransferScheduled(address,uint48)": {
        "details": "Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule` passes."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "acceptDefaultAdminTransfer()": {
        "details": "Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed."
      },
      "beginDefaultAdminTransfer(address)": {
        "details": "Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event."
      },
      "buyCredits(string,uint256,address)": {
        "details": "Users must send sufficient Ether to cover the cost and fees.",
        "params": {
          "amount": "The amount of credits to buy.",
          "referrer": "The address of the referrer (optional).",
          "visibilityId": "The ID representing the visibility credits."
        }
      },
      "cancelDefaultAdminTransfer()": {
        "details": "Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event."
      },
      "changeDefaultAdminDelay(uint48)": {
        "details": "Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event."
      },
      "claimCreatorFee(string)": {
        "params": {
          "visibilityId": "The ID representing the visibility credits."
        }
      },
      "defaultAdmin()": {
        "details": "Returns the address of the current `DEFAULT_ADMIN_ROLE` holder."
      },
      "defaultAdminDelay()": {
        "details": "Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}."
      },
      "defaultAdminDelayIncreaseWait()": {
        "details": "Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds)."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "See {IERC5313-owner}."
      },
      "pendingDefaultAdmin()": {
        "details": "Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced."
      },
      "pendingDefaultAdminDelay()": {
        "details": "Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule."
      },
      "renounceRole(bytes32,address)": {
        "details": "See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role."
      },
      "revokeRole(bytes32,address)": {
        "details": "See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
      },
      "rollbackDefaultAdminDelay()": {
        "details": "Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event."
      },
      "sellCredits(string,uint256,address)": {
        "details": "Users receive Ether minus applicable fees.",
        "params": {
          "amount": "The amount of credits to sell.",
          "referrer": "The address of the referrer (optional).",
          "visibilityId": "The ID representing the visibility credits."
        }
      },
      "setCreatorVisibility(string,address)": {
        "details": "Only callable by an account with the `CREATORS_CHECKER_ROLE`.",
        "params": {
          "creator": "The address of the creator, can be address(0).",
          "visibilityId": "The ID representing the visibility credits."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferCredits(string,address,address,uint256)": {
        "details": "Only callable by an account with the `CREDITS_TRANSFER_ROLE`.",
        "params": {
          "amount": "The amount of credits to transfer.",
          "from": "The address to transfer credits from.",
          "to": "The address to transfer credits to.",
          "visibilityId": "The ID representing the visibility credits."
        }
      },
      "updateTreasury(address)": {
        "details": "Only callable by an account with the `DEFAULT_ADMIN_ROLE`.",
        "params": {
          "treasury": "The address of the new protocol treasury (cannot be address(0))."
        }
      }
    },
    "stateVariables": {
      "A": {
        "details": "The bonding curve is defined by the formula:        PRICE = BASE_PRICE + A * totalSupply^2 + B * totalSupply      - BASE_PRICE: The initial price when totalSupply is zero.      - A, B: Constants that determine the curvature of the price function."
      }
    },
    "title": "VisibilityCredits",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "A()": {
        "notice": "Users can purchase and sell visibility credits according to a bonding curve."
      },
      "FEE_DENOMINATOR()": {
        "notice": "Fee percentages in ppm (parts per million)."
      },
      "buyCredits(string,uint256,address)": {
        "notice": "Buys a specified amount of visibility credits."
      },
      "claimCreatorFee(string)": {
        "notice": "Allows creators to claim their accumulated fees."
      },
      "sellCredits(string,uint256,address)": {
        "notice": "Sells a specified amount of visibility credits."
      },
      "setCreatorVisibility(string,address)": {
        "notice": "Sets the creator for a specific visibility ID."
      },
      "transferCredits(string,address,address,uint256)": {
        "notice": "Transfers visibility credits between users."
      },
      "updateTreasury(address)": {
        "notice": "Updates the protocol treasury address."
      }
    },
    "notice": "Allows users to buy and sell visibility credits along a bonding curve.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 400,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_pendingDefaultAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 402,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_pendingDefaultAdminSchedule",
        "offset": 20,
        "slot": "1",
        "type": "t_uint48"
      },
      {
        "astId": 404,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_currentDelay",
        "offset": 26,
        "slot": "1",
        "type": "t_uint48"
      },
      {
        "astId": 406,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_currentDefaultAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 408,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_pendingDelay",
        "offset": 20,
        "slot": "2",
        "type": "t_uint48"
      },
      {
        "astId": 410,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_pendingDelaySchedule",
        "offset": 26,
        "slot": "2",
        "type": "t_uint48"
      },
      {
        "astId": 1498,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4467,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "protocolTreasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 4472,
        "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
        "label": "visibilityCredits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Visibility)4425_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_struct(Visibility)4425_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VisibilityCredits.Visibility)",
        "numberOfBytes": "32",
        "value": "t_struct(Visibility)4425_storage"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Visibility)4425_storage": {
        "encoding": "inplace",
        "label": "struct VisibilityCredits.Visibility",
        "members": [
          {
            "astId": 4416,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4418,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "totalSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4420,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "claimableFeeBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4424,
            "contract": "contracts/VisibilityCredits.sol:VisibilityCredits",
            "label": "creditBalances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}